#!/usr/bin/env node

const [,, ...args] = process.argv;
const path = require('path');
const { generateFromAI } = require(path.join(__dirname, '../src/core/ai.js'));
const readline = require('readline');

async function main() {
  if (args.length === 0) {
    console.log('Usage: reinvent <string>');
    process.exit(1);
  }
  while (true) {
    try {
      const { output } = await generateFromAI(args.join(' '));
      console.log('AI generated commands:\n\n' + output + '\nExecute the commands? (y = execute, n = exit, r = regenerate): ');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      const answer = await new Promise(resolve => {
        rl.question('', resolve);
      });
      rl.close();
      if (answer.trim().toLowerCase() === 'y') {
        // Execute each command line by line in node
        const commands = output.split('\n').filter(Boolean);
        for (const cmd of commands) {
          try {
            console.log(`\n> ${cmd}`);
            require('child_process').execSync(cmd, { stdio: 'inherit', shell: true });
          } catch (err) {
            console.error('Error executing command:', err.message || err);
          }
        }
        break;
      } else if (answer.trim().toLowerCase() === 'n') {
        console.log('Exit.');
        break;
      } else if (answer.trim().toLowerCase() === 'r') {
        console.log('Regenerating command(s)...');
        continue;
      } else {
        console.log('Invalid input. Please enter y, n, or r.');
      }
    } catch (err) {
      console.error('Error:', err.message || err);
      process.exit(1);
    }
  }
}

main();
